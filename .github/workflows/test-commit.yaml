name: Test Commit Workflow

on:
  workflow_dispatch:
    inputs:
      app_id:
        description: The ID of the app triggering.
        type: string
        required: true
      check_name:
        description: The name of the check.
        type: string
        required: true
      check_run_id:
        description: The ID of the check run.
        type: string
        required: true
      commit_sha:
        description: The commit SHA to test.
        type: string
        required: true

run-name: Test Commit Workflow (${{ inputs.commit_sha }})

permissions: read-all

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Setup
        id: setup
        run: |
          set -euo pipefail

          payload='{"checkRunID":${{ inputs.check_run_id }},"workflowRunID":${{ github.run_id }},"commitSHA":"${{ inputs.commit_sha }}"}'
          echo "payload=${payload}" >> "${GITHUB_OUTPUT}"

      - name: Notify start
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          payload='${{ steps.setup.outputs.payload }}'
          printf '{"event_type":"check_run_start","client_payload":%s}' "${payload}" | gh api -X POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" --input - /repos/${{ github.repository }}/dispatches

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.commit_sha }}
          fetch-depth: 2

      - name: Check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Success."
            exit 0
          fi

          if [[ "$(git rev-list --count HEAD)" != "1" ]]; then
            check_name='${{ inputs.check_name }}'
            previous_commit="$(git rev-parse HEAD~1)"

            retries=3
            while ((retries > 0)); do
              outcome="$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${{ github.repository }}/commits/${previous_commit}/check-runs?app_id=${{ inputs.app_id }}&check_name=${check_name// /%20}" | jq -r '.check_runs[0] // {status: "completed",conclusion: "success"} | if .status == "completed" then .conclusion else "pending" end')"

              if [[ "${outcome}" == "success" ]]; then
                break
              elif [[ "${outcome}" == "pending" ]]; then
                echo "Previous check run not completed. Retrying in 30 seconds..."
                sleep 30s
                ((retries --))
                continue
              else
                echo "Previous check run failed."
                exit 1
              fi
            done

            if ((retries == 0 )); then
              echo "Previous check run not completed."
              exit 1
            fi
          fi

          if [[ "$(( $RANDOM % 2 ))" != "1" ]]; then
            echo "Failure."
            exit 1
          fi

          echo "Success."

      - name: Notify end
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          payload='${{ steps.setup.outputs.payload }}'
          printf '{"event_type":"check_run_end","client_payload":%s}' "${payload}" | gh api -X POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" --input - /repos/${{ github.repository }}/dispatches
